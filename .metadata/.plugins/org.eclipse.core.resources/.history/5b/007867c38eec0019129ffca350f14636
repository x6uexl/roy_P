package com.lemone.java.maven.day01;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/*异常机制处理抛出异常
 * 
 */
public class Throwdemo {
	public static void main(String[] args) throws FileNotFoundException, IOException {
		// 准备文件对象
		String filePath = "src/test/resources/log41j.properties";//当这里文件路径写错 调用loadproperities2方法的时候就会抛出异常
		// 在main方法中调用loadProperties文件 loadPropertie有两个异常
//		loadProperties1(filePath);
		loadProperties2(filePath);

	}

	private static void loadProperties1(String filePath) throws FileNotFoundException, IOException {
		// loadProperties(filePath);
		// 将文件对象输入到
		File file = new File(filePath);
		InputStream iStream = new FileInputStream(file);
		Properties properties = new Properties();
		properties.load(iStream);
		System.out.println(properties.get("log4j.rootLogger"));
		// 主动抛出异常，当代码出现预期不一样的时候 其他人来调用这个方法
		// throw new ClassNotFoundException();//这里我没有抛出也没有try{} catch{} 所以我将手动添加的异常注释来

	}

	private static void loadProperties2(String filePath) {
		// loadProperties(filePath);
		// 将文件对象输入到
		File file = new File(filePath);
		//将文件里面的内容读取到输入流对象
		InputStream iStream = null;//初始化变量
		Properties properties = new Properties();
		try {//try代码块 里面放的是受保护的代码（可能会发生异常的代码）
			iStream = new FileInputStream(file);
		    properties.load(iStream);//这里不初始化会报错 
		} catch (FileNotFoundException e) {
		   System.out.println("文件找不到");
			//catch代码块写的是捕捉到异常后的后续操作（输出异常错误信息，记录错误信息到日志文件）
		}		
		 catch (IOException e) {
			System.out.println("IO异常");
		}
		System.out.println(properties.get("log4j.rootLogger"));
		// 主动抛出异常，当代码出现预期不一样的时候 其他人来调用这个方法

	}
}
